{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* Projects */
    // "incremental": true,                              /* 增量编译  */
     //"diagnostics": true,                              /**打印诊断信息*/
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* 增量编译文件的存储位置 */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
     "target": "es2015",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
     //"lib": ["dom","es5","scripthost","ES2019.Array"],  /* TS需要的引用库，即声明文件，es5默认["dom","es5","scripthost"] */
    // "jsx": "preserve",                                /* Specify what JSX code is generated. */
    // "experimentalDecorators": true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */

    /* Modules */
     "module": "commonjs",                                /* 生成代码的模块标准 */
    // "rootDir": "./",                                  /* 指定输入文件目录（用于控制输出结构的） */
    // "moduleResolution": "node",                       /* 模块解析策略. */
     //"baseUrl": "./src",                                  /* 解析非相对模块的基地值 */
    // "paths": {},                                      /* 路径映射，相对于baseUrl 的 */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
     "allowUmdGlobalAccess": true,                     /* 允许在模块中访问 UMD 全局变量. */
    // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
    // "resolveJsonModule": true,                        /* Enable importing .json files. */
    // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
    // "allowJs": true,                                  /*允许编译js文件（js,jsx）*/
    // "checkJs": true,                                  /* 允许在js文件中报错，通常与allowJs一起使用. */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

    /* Emit */
     //"declaration": true,                              /* 生成声明文件.d.ts. */
     //"declarationMap": true,                           /* 生成声明文件 sourceMap. */
     //"emitDeclarationOnly": true,                      /* 只生成声明文件不生成.js文件. */
     //"sourceMap": true,                                /* 生成目录文件的 sourceMap.  .js.map */
     //"outFile": "./app.js",                            /*多个相互依赖的文件生成一个文件，可以用在AMD模块中 */
     "outDir": "./build",                                   /* 指定输出文件. */
      //"removeComments": true,                           /* 删除注释 */
     //"noEmit": true,                                   /* 不输出任何的结果. */
      //"importHelpers": true,                            /* 通过tslib引入 helper函数，文件必须是模块*/
    // "importsNotUsedAsValues": "remove",               /* Specify emit/checking behavior for imports that are only used for types. */
   // "downlevelIteration": true,                       /* 降级遍历器的实现[es3,es5]. */
    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* 生成目录文件line sourceMap. */
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
     //"noEmitHelpers": true,                            /* 不生成Helpers函数需要额外安装ts-helpers */
     //"importHelpers": true,   
      // "noEmitOnError": true,                            /* 报错时不输出文件. */
    // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */
    // "preserveValueImports": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */

    /* Interop Constraints */
    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
    // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true,                             /* 允许 export = 导出，由 import from 导入*/
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
   // "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */

    /* Type Checking */
    //"strict": true,                                      /* 开启所有严格类型检查，如果开启，下面都也是true */
    // "noImplicitAny": true,                            /* 不允许隐式的any类型。 */
    // "strictNullChecks": true,                         /* 不允许把null,undefined 赋值给其他类型. */
    // "strictFunctionTypes": true,                      /* 禁用函数参数双向协变检查 */
    //"strictBindCallApply": true,                      /* 严格的 'bind', 'call', and 'apply' 方法检查 */
    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
     //"noImplicitThis": false,                           /* 不允许类 this 有隐式的 any 类型. */
     // "useUnknownInCatchVariables": true,               /* 防止 switch语句贯穿. */
    // "alwaysStrict": true,                             /* 在代码中注入"use strict" */
   
     //"noUnusedLocals": true,                           /* 检查只声明，未使用的变量 */
     //"noUnusedParameters": true,                       /* 检查未使用的函数参数 */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    
      "noImplicitReturns": true,                        /* 每个分支都有返回值. */
    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
  }
}
